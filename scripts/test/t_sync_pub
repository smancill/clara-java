#!/usr/bin/env bash

# tmux="tmate -S /tmp/smancill.tmate.sock"
tmux="tmux"
sn=xsyncpub

x_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/../.."
x_prx="./scripts/dev/jx_proxy"
x_reg="./scripts/dev/jx_registrar"
x_script="./scripts/test/sync_pub"


function usage()
{
    echo "usage: $0 [ -r <reg_host> ] [ -f <nodes.list> ] <pool_size> <pub_cores> <num_msg>"
}


reg_host=localhost
while getopts "hr:f:" OPTION
do
    case $OPTION in
        h)
            usage; exit 0 ;;
        r)
            reg_host=$OPTARG ;;
        f)
            nodes_file=$OPTARG ;;
        ?)
            echo; usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))
if [[ $# -eq 3 ]]; then
    pool_size=$1
    num_cores=$2
    num_msg=$3
else
    usage
    exit 1
fi

# read nodes
if [ -n "$nodes_file" ]; then
    declare -a nodes
    IFS=$'\r\n' GLOBIGNORE='*' command eval "nodes=($reg_host $(grep -v "^#" "$nodes_file"))"
    printf '%s\n' "${nodes[@]}"
fi


function run_ssh()
{
    $tmux send-keys -t "$sn:$1.$2" " ssh $3" "C-m"
}


function run_script()
{
    $tmux send-keys -t "$sn:$1.$2" " cd \"$x_dir\" && $3" "C-m"
}


function run_local()
{
    $tmux send-keys -t "$sn:$1.$2" " $3" "C-m"
}


function split_window()
{
    for (( i=1; i<="$2"; i++ )); do
        $tmux split-window -v -t "$sn:$1"
        $tmux select-layout -t "$sn:$1" tiled
    done
}


function connect_nodes()
{
    for (( i=1; i<="$2"; i++ )); do
        run_ssh "$1" "$i" "${nodes[$i]}"
    done
    run_ssh "$1" "$3" "${nodes[0]}"
}


function multi_node_test()
{
    last=$((${#nodes[@]} - 1))
    cli_pane=$((last + 1))

    prx_win=1
    cli_win=2

    $tmux new-window -d -t $sn:$cli_win -n test

    $tmux setw -q -t $sn:$prx_win pane-base-index 1
    $tmux setw -q -t $sn:$cli_win pane-base-index 1

    split_window $prx_win $last
    split_window $cli_win $last

    connect_nodes $prx_win $last $cli_pane
    connect_nodes $cli_win $last $cli_pane


    # Start xMsg proxy and registrar
    run_script $prx_win $cli_pane " $x_reg"
    for (( i=1; i<=last; i++ )); do
        run_script $prx_win $i "$x_prx"
    done
    sleep 15

    # Start listeners
    for (( i=1; i<=last; i++ )); do
        run_script $cli_win $i \
            "./scripts/test/sync_pub ${nodes[0]} $pool_size listener"
    done


    # Prepare test
    $tmux send-keys -t $sn:$cli_win.$cli_pane \
        " cd \"$x_dir\" && $x_script ${nodes[0]} $num_cores $num_msg"
    $tmux select-pane -t $sn:$cli_win.$cli_pane
}


function local_test()
{
    cli_win=1

    $tmux setw -q -t "$sn:$cli_win" pane-base-index 1
    split_window $cli_win 3

    run_local $cli_win 1 "$x_prx"
    run_local $cli_win 2 "$x_reg"

    sleep 3
    run_local $cli_win 3 "$x_script $reg_host $pool_size listener"

    $tmux send-keys -t $sn:$cli_win.4 " $x_script $reg_host $num_cores $num_msg"
    $tmux select-pane -t $sn:$cli_win.4
}


$tmux has-session -t "$sn" 2>/dev/null
if [[ "$?" -eq 1 ]]; then
    echo "No session found. Creating and configuring."

    cd "$x_dir" || exit
    $tmux new-session -s "$sn" -n scia -d

    if [[ -z "$nodes_file" ]]; then
        local_test
    else
        multi_node_test
    fi
fi

$tmux -2 attach-session -t "$sn"
